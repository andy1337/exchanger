const WizardScene = require("telegraf/scenes/wizard");

const { Worker } = require("../../database");

const scene = new WizardScene(
    "change#user#tag",
    async (ctx) => {
        try {
            await ctx.reply(`<i>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ (–ü—Ä–∏–º–µ—Ä: #mytag):</i>`, {
                parse_mode: "HTML",
            });
            
            return ctx.wizard.next();
        } catch (err) {
            ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞ ").catch((err) => err);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            if (!ctx.message.text) return ctx.wizard.prevStep();

            let filter = /(#)/
            if(!filter.test(ctx.message.text.toLowerCase())) {
                return ctx.wizard.prevStep();
            }

            const user = await Worker.findByPk(ctx.state.worker.id);
            let message = "";

            if(user.tag === null) message = "–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ–≥"
            else message = "–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–≥"

            user.tag = ctx.message.text;
            await user.save();


            await ctx.replyWithHTML(`<b>‚úÖ ${message} !</b>`)
            return ctx.scene.leave();
        } catch (err) {
            console.log(err)
            ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
            return ctx.scene.leave();
        }
    },
);

module.exports = scene;