const WizardScene = require("telegraf/scenes/wizard");
const escapeHTML = require("escape-html");
const { Markup } = require("telegraf");

const { Request } = require("../../database");

const scene = new WizardScene(
    "request_create",
    async (ctx) => {
        try {
            await ctx.scene.reply("–ö–∞–∫–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?", {
                parse_mode: "HTML",
            });

            ctx.scene.state.data = {};

            return ctx.wizard.next();
        } catch (err) {
            await require("../../../utils/sendError")(err)
            ctx.replyOrEdit("‚ùå request - step1").catch((err) => err);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            if (!ctx.message?.text) return ctx.wizard.prevStep();

            ctx.scene.state.data.step1 = escapeHTML(
                ctx.message.text.replace(/\s+/g, " ").substr(0, 600)
            );

            return ctx.wizard.nextStep();
        } catch (err) {
            await require("../../../utils/sendError")(err)
            ctx.replyOrEdit("‚ùå request - step2").catch((err) => err);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            await ctx.scene.reply("–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å?", {
                parse_mode: "HTML",
            });

            return ctx.wizard.next();
        } catch (err) {
            await require("../../../utils/sendError")(err)
            ctx.replyOrEdit("‚ùå request - step3").catch((err) => err);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            if (!ctx.message?.text) return ctx.wizard.prevStep();

            ctx.scene.state.data.step2 = escapeHTML(
                ctx.message.text.replace(/\s+/g, " ").substr(0, 600)
            );

            return ctx.wizard.nextStep();
        } catch (err) {
            await require("../../../utils/sendError")(err)
            ctx.replyOrEdit("‚ùå request - step4").catch((err) => err);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            await ctx.scene.reply("–£–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –≤—ã —É–≤–∏–¥–µ–ª–∏ —Ä–µ–∫–ª–∞–º—É.", {
                parse_mode: "HTML",
            });
            return ctx.wizard.next();
        } catch (err) {
            await require("../../../utils/sendError")(err)
            ctx.replyOrEdit("‚ùå request - step5").catch((err) => err);
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        try {
            if (!ctx.message?.text) return ctx.wizard.prevStep();

            ctx.scene.state.data.step3 = escapeHTML(
                ctx.message.text.replace(/\s+/g, " ").substr(0, 600)
            );

            const request = await Request.create({
                userId: ctx.state.worker.id,
                ...ctx.scene.state.data,
                status: 0
            });

            const message = [
                `‚ÑπÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b><a href="tg://user?id=${ctx.from.id}">${ctx.state.worker.username}</a></b>`,
                "",
                "üö¶ –°—Ç–∞—Ç—É—Å: <b>–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ ‚è≥</b>",
                "",
                `–ö–∞–∫–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?: <b>${request.step1}</b>`,
                `–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å?: <b>${request.step2}</b>`,
                `–£–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –≤—ã —É–≤–∏–¥–µ–ª–∏ —Ä–µ–∫–ª–∞–º—É.: <b>${request.step3}</b>`
            ]

            ctx.telegram.sendMessage(
                process.env.REQUEST_CHAT_ID, message.join("\r\n"), {
                parse_mode: "HTML",
                reply_markup: Markup.inlineKeyboard([
                    [
                        Markup.callbackButton(
                            "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                            `admin#request#${request.id}#accept`
                        ),
                        Markup.callbackButton(
                            "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                            `admin#request#${request.id}#decline`
                        ),
                    ],
                ]),
            });

            await ctx.scene.reply("‚ú≥Ô∏è <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–π—Ç–µ.</b>", {
                parse_mode: "HTML",
            });

        } catch (err) {
            await require("../../../utils/sendError")(err)
            ctx.replyOrEdit("‚ùå –û—à–∏–±–∫–∞").catch((err) => err);
        }
        return ctx.scene.leave();
    }
);

module.exports = scene;