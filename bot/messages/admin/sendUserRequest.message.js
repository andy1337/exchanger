const { Markup } = require("telegraf");

const { Request } = require("../../database");

const escapeHTML = require("escape-html");

module.exports = async (ctx, id) => {
  try {
    const request = await Request.findOne({
      where: {
        id,
      },
      include: [
        {
          association: "worker",
          required: true,
        },
      ],
    });

    if (!request) {
      return ctx
        .replyOrEdit("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", {
          reply_markup: Markup.inlineKeyboard([
            [
              Markup.callbackButton(
                "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                `admin#requests#1`
              ),
            ],
          ]),
        })
    }

    const message = [
      `üì∞ –ó–∞—è–≤–∫–∞ #${request.id}`,
      "",
      `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b><a href="tg://user?id=${request.worker.telegram_id}">${request.worker.username}</a></b>`,
      "",
      `–ö–∞–∫–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?: <b>${escapeHTML(request.step1)}</b>`,
      `–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å?: <b>${escapeHTML(request.step2)}</b>`,
      `–£–∫–∞–∂–∏—Ç–µ, –≥–¥–µ –≤—ã —É–≤–∏–¥–µ–ª–∏ —Ä–µ–∫–ª–∞–º—É.: <b>${escapeHTML(request.step3)}</b>`,
      "",
      `üö¶ –°—Ç–∞—Ç—É—Å: <b>${request.status == 0? "‚è≥ –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏": (request.status == 1 ? "‚úÖ –ü—Ä–∏–Ω—è—Ç–æ": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")}</b>`
    ]

    return ctx.replyOrEdit(message.join("\r\n"),
      {
        parse_mode: "HTML",
        reply_markup: Markup.inlineKeyboard([
          [
            Markup.callbackButton(
                "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                `admin#request#${request.id}#accept`
            ),
            Markup.callbackButton(
                "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                `admin#request#${request.id}#decline`
            ),
          ],
          [Markup.callbackButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", "admin#requests#1")],
        ]),
      }
    )
  } catch (err) {
    console.log(err)
  }

};